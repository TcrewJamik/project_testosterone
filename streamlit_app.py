import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import (accuracy_score, roc_auc_score, f1_score, precision_score, 
                             recall_score, roc_curve, auc, confusion_matrix, classification_report)
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from catboost import CatBoostClassifier
from xgboost import XGBClassifier
import requests
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞", page_icon="‚öôÔ∏è", layout="wide")
st.title("–ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞")

# ------------------------ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ------------------------
raw_url = "https://raw.githubusercontent.com/TcrewJamik/project_testosterone/refs/heads/master/ptestost.xlsx"
try:
    response = requests.get(raw_url)
    response.raise_for_status()
    excel_file = io.BytesIO(response.content)
    df = pd.read_excel(excel_file)
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    df = df.rename(columns={
        'Age': '–í–æ–∑—Ä–∞—Å—Ç',
        'DM': '–ù–∞–ª–∏—á–∏–µ –î–∏–∞–±–µ—Ç–∞',
        'TG': '–¢—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã (–º–≥/–¥–ª)',
        'HT': '–ù–∞–ª–∏—á–∏–µ –ì–∏–ø–µ—Ä—Ç–æ–Ω–∏–∏',
        'HDL': 'HDL_—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω',
        'AC': '–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å_—Ç–∞–ª–∏–∏',
        'T': '–î–µ—Ñ–∏—Ü–∏—Ç –¢–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞'
    })
    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub!")
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    st.stop()

# ------------------------ –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• ------------------------
target = df['–î–µ—Ñ–∏—Ü–∏—Ç –¢–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞']
X = df.drop(columns=['–î–µ—Ñ–∏—Ü–∏—Ç –¢–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞'])
y = target

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
non_numeric = X.select_dtypes(include=['object']).columns
if len(non_numeric) > 0:
    le = LabelEncoder()
    for col in non_numeric:
        X[col] = le.fit_transform(X[col])

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
feature_names = X.columns.tolist()

# ------------------------ –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ ------------------------
with st.sidebar:
    st.header("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    model_choice = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "CatBoost", "XGBoost", "Decision Tree", "Random Forest"]
    )
    
    train_button = st.button("üî• –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")

# ------------------------ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò ------------------------
if train_button:
    clf = None
    if model_choice == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
        clf = LogisticRegression(random_state=42, max_iter=1000)
    elif model_choice == "CatBoost":
        clf = CatBoostClassifier(random_state=42, verbose=0)
    elif model_choice == "XGBoost":
        clf = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss')
    elif model_choice == "Decision Tree":
        clf = DecisionTreeClassifier(random_state=42)
    elif model_choice == "Random Forest":
        clf = RandomForestClassifier(random_state=42)

    clf.fit(X_train_scaled, y_train)
    y_pred = clf.predict(X_test_scaled)
    y_prob = clf.predict_proba(X_test_scaled)[:, 1]

    st.subheader("üèÜ –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏")
    st.metric("–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)", f"{accuracy_score(y_test, y_pred):.3f}")
    st.metric("ROC AUC", f"{roc_auc_score(y_test, y_prob):.3f}")
    st.metric("F1-–º–µ—Ä–∞", f"{f1_score(y_test, y_pred):.3f}")

    # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    cm = confusion_matrix(y_test, y_pred)
    fig_cm, ax_cm = plt.subplots(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='viridis', ax=ax_cm)
    ax_cm.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
    ax_cm.set_ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
    ax_cm.set_title("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
    st.pyplot(fig_cm)
    
    # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞, XGBoost –∏ CatBoost
    if model_choice in ["Random Forest", "XGBoost", "CatBoost"]:
        st.subheader("üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        importances = clf.feature_importances_
        imp_df = pd.DataFrame({'–ü—Ä–∏–∑–Ω–∞–∫': feature_names, '–í–∞–∂–Ω–æ—Å—Ç—å': importances})
        imp_df = imp_df.sort_values(by='–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False)
        
        fig_imp, ax_imp = plt.subplots(figsize=(10, 5))
        sns.barplot(x=imp_df['–í–∞–∂–Ω–æ—Å—Ç—å'], y=imp_df['–ü—Ä–∏–∑–Ω–∞–∫'], palette='coolwarm', ax=ax_imp)
        ax_imp.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        st.pyplot(fig_imp)
